// bot.js
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import { WebSocketServer } from 'ws';
import { createServer } from 'http';
import dbConnect from './lib/dbConnect.js';
import cors from 'cors';
import config from './config.js';

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
import User from './models/User.js';
import Product from './models/Product.js';
import ProductClaim from './models/ProductClaim.js';
import Notification from './models/Notification.js';
import Referral from './models/Referral.js';

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
import adminRoutes from './routes/adminRoutes.js';
import userRoutes from './routes/userRoutes.js';
import settingsRoutes from './routes/settingsRoutes.js';
import notificationRoutes from './routes/notificationRoutes.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –∏ WebSocket
const app = express();
const server = createServer(app);
const wss = new WebSocketServer({ server });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
const clients = new Map();

// –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–µ CORS-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥
// –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ middleware

// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º CORS-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Accept, X-Requested-With');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ OPTIONS
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    next();
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    if (Object.keys(req.body || {}).length > 0) {
        console.log('Request body:', JSON.stringify(req.body, null, 2));
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ res.json
    const originalJson = res.json;

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ res.json –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    res.json = function(data) {
        console.log(`Response for ${req.method} ${req.url}:`, JSON.stringify(data, null, 2));
        originalJson.call(this, data);
    };

    next();
});

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, { webHook: true });

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
app.use((req, res, next) => {
    req.bot = bot;
    req.clients = clients;
    next();
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
app.use('/api/admin', adminRoutes);
app.use('/api/users', userRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/settings', settingsRoutes); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
wss.on('connection', (ws, req) => {
    const userId = new URLSearchParams(req.url.slice(1)).get('userId');

    if (userId) {
        clients.set(userId, ws);
        console.log(`[WebSocket] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${userId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ws.send(JSON.stringify({
            type: 'connection_test',
            message: 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        }));

        ws.on('message', (message) => {
            console.log(`[WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}:`, message);
        });

        ws.on('close', () => {
            clients.delete(userId);
            console.log(`[WebSocket] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${userId}`);
        });

        ws.on('error', (error) => {
            console.error(`[WebSocket] –û—à–∏–±–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${userId}:`, error);
        });
    }
});

// Webhook –¥–ª—è Telegram
app.post(`/webhook/${config.TELEGRAM_BOT_TOKEN}`, async (req, res) => {
    try {
        await bot.processUpdate(req.body);
        res.sendStatus(200);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ webhook:', error);
        res.sendStatus(500);
    }
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start(.*)/, async (msg, match) => {
    const startParam = match[1].trim();
    const userId = msg.from.id;

    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start:', {
        param: startParam,
        user: msg.from
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = await User.findOneAndUpdate(
        { telegramId: userId.toString() },
        {
            $setOnInsert: {
                first_name: msg.from.first_name,
                last_name: msg.from.last_name,
                username: msg.from.username,
                language_code: msg.from.language_code,
                photo_url: null,
                registeredAt: new Date(),
                gameData: {
                    balance: 0,
                    passiveIncome: 0,
                    energy: {
                        current: 1000,
                        max: 1000,
                        regenRate: 1,
                        lastRegenTime: Date.now()
                    },
                    level: {
                        current: 1,
                        max: 10,
                        progress: 0,
                        title: '–ù–æ–≤–∏—á–æ–∫'
                    }
                }
            },
            $set: {
                lastLogin: new Date()
            }
        },
        { upsert: true, new: true }
    );

    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', userData);

    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        if (startParam.startsWith('ref_')) {
            const referrerId = startParam.substring(4);

            try {
                await Referral.create({
                    referrerId,
                    userId: userId.toString(),
                    userData: {
                        first_name: msg.from.first_name,
                        last_name: msg.from.last_name,
                        username: msg.from.username,
                        language_code: msg.from.language_code
                    }
                });

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                await bot.sendMessage(referrerId,
                    `üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: ${msg.from.first_name}!\n–ö–æ–≥–¥–∞ –æ–Ω –Ω–∞—á–Ω–µ—Ç –∏–≥—Ä–∞—Ç—å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å.`
                );
            } catch (error) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if (error.code !== 11000) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
                }
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const welcomeMessage = startParam.startsWith('ref_')
            ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.'
            : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!';

        await bot.sendMessage(userId, welcomeMessage, {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                        web_app: { url: config.WEBAPP_URL }
                    }
                ]]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start:', error);
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('webhook_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ webhook:', error);
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
    try {
        await dbConnect();
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

        server.listen(config.PORT, () => {
            console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.PORT}`);
            console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
                WEBAPP_URL: config.WEBAPP_URL,
                API_URL: config.API_URL,
                APP_URL: config.APP_URL,
                MONGODB_URI: 'Connected'
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const GameSettings = (await import('./models/GameSettings.js')).default;
        await GameSettings.getDefaultSettings();
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

        if (config.APP_URL) {
            const webhookUrl = `${config.APP_URL}/webhook/${config.TELEGRAM_BOT_TOKEN}`;
            try {
                await bot.setWebHook(webhookUrl);
                console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl);

                const webhookInfo = await bot.getWebHookInfo();
                console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', webhookInfo);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
};

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
const shutdown = async () => {
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    try {
        await bot.closeWebHook();
        server.close(() => {
            console.log('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            process.exit(0);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
        process.exit(1);
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});
process.on('unhandledRejection', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
console.log('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
startServer().catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
    process.exit(1);
});

export default server;