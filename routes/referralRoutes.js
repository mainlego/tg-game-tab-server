// routes/referralRoutes.js
import express from 'express';
import Referral from '../models/Referral.js';

const router = express.Router();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', async (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', req.query);
    try {
        const { userId } = req.query;

        if (!userId) {
            return res.status(400).json({
                success: false,
                message: '–ü–∞—Ä–∞–º–µ—Ç—Ä userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –≥–¥–µ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
        const referrals = await Referral.find({ referrerId: userId });
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${referrals.length} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        return res.status(200).json({
            success: true,
            data: referrals
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        return res.status(500).json({
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
router.post('/', async (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', req.body);
    try {
        const { referrerId, userId, userData } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!referrerId || !userId) {
            return res.status(400).json({
                success: false,
                message: 'referrerId –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const existingReferral = await Referral.findOne({ userId });
        if (existingReferral) {
            return res.status(400).json({
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const newReferral = new Referral({
            referrerId,
            userId,
            userData: {
                first_name: userData?.first_name || '',
                last_name: userData?.last_name || '',
                username: userData?.username || '',
                language_code: userData?.language_code || '',
                photo_url: userData?.photo_url || ''
            },
            joinedAt: new Date(),
            rewardClaimed: false
        });

        await newReferral.save();
        console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª:', newReferral);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —á–µ—Ä–µ–∑ Telegram (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        if (req.bot) {
            try {
                await req.bot.sendMessage(
                    referrerId,
                    `üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: ${userData?.first_name || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n–ö–æ–≥–¥–∞ –æ–Ω –Ω–∞—á–Ω–µ—Ç –∏–≥—Ä–∞—Ç—å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å.`
                );
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            }
        }

        return res.status(201).json({
            success: true,
            data: newReferral
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
        return res.status(500).json({
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã)
router.put('/:id', async (req, res) => {
    console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${req.params.id}:`, req.body);
    try {
        const { id } = req.params;
        const { rewardClaimed } = req.body;

        if (rewardClaimed === undefined) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å rewardClaimed'
            });
        }

        const updatedReferral = await Referral.findByIdAndUpdate(
            id,
            { rewardClaimed },
            { new: true }
        );

        if (!updatedReferral) {
            return res.status(404).json({
                success: false,
                message: '–†–µ—Ñ–µ—Ä–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        return res.status(200).json({
            success: true,
            data: updatedReferral
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', error);
        return res.status(500).json({
            success: false,
            error: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

export default router;