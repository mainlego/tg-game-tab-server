// routes/notificationRoutes.js
import express from 'express';
import User from '../models/User.js';
import Notification from '../models/Notification.js';

const router = express.Router();

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.post('/send', async (req, res) => {
    try {
        const { type, message, important, conditions, button } = req.body;
        console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', req.body);

        // –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let query = {};
        // –î–ª—è type='all' –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –≤ query
        if (type !== 'all') {
            if (type === 'level' && conditions?.minLevel) {
                query['gameData.level.current'] = { $gte: conditions.minLevel };
            }
            if (type === 'income' && conditions?.minIncome) {
                query['gameData.passiveIncome'] = { $gte: conditions.minIncome };
            }
        }

        console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å query:', query);
        const users = await User.find(query).select('telegramId');
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users.length);

        const userIds = users.map(user => user.telegramId);

        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = await Notification.create({
            type,
            message,
            important,
            conditions,
            button,
            stats: {
                sentCount: 0,
                readCount: 0,
                failedCount: 0,
                targetUsers: userIds
            },
            status: 'sending'
        });

        let successCount = 0;
        let failedCount = 0;
        let failures = [];

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        for (const userId of userIds) {
            try {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
                const options = {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
                if (button?.text && button?.url) {
                    options.reply_markup = {
                        inline_keyboard: [[
                            {
                                text: button.text,
                                url: button.url
                            }
                        ]]
                    };
                }

                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                let formattedMessage = '';
                if (important) formattedMessage += 'üîî –í–ê–ñ–ù–û!\n\n';
                formattedMessage += message;

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram
                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è ${userId}`);
                await req.bot.sendMessage(userId, formattedMessage, options);

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
                const ws = req.clients.get(userId.toString());
                if (ws?.readyState === 1) {
                    ws.send(JSON.stringify({
                        type: 'notification',
                        message: formattedMessage,
                        important,
                        button
                    }));
                }

                successCount++;
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${userId}:`, error);
                failedCount++;
                failures.push({ userId, error: error.message });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 50));
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await Notification.findByIdAndUpdate(notification._id, {
            'stats.sentCount': successCount,
            'stats.failedCount': failedCount,
            status: 'sent',
            sentAt: new Date()
        });

        res.json({
            success: true,
            data: {
                notificationId: notification._id,
                targetCount: userIds.length,
                successCount,
                failedCount,
                failures
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.post('/test', async (req, res) => {
    try {
        const { message, important, button, testUserId } = req.body;

        if (!testUserId) {
            return res.status(400).json({
                success: false,
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            });
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
        const notification = await Notification.create({
            type: 'test',
            message,
            important,
            button,
            stats: {
                sentCount: 0,
                readCount: 0,
                failedCount: 0
            },
            status: 'sending'
        });

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let formattedMessage = '[–¢–ï–°–¢] ';
        if (important) formattedMessage += 'üîî –í–ê–ñ–ù–û!\n\n';
        formattedMessage += message;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const options = {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        if (button?.text && button?.url) {
            options.reply_markup = {
                inline_keyboard: [[
                    {
                        text: button.text,
                        url: button.url
                    }
                ]]
            };
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram
        await req.bot.sendMessage(testUserId, formattedMessage, options);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        const ws = req.clients.get(testUserId.toString());
        if (ws?.readyState === 1) {
            ws.send(JSON.stringify({
                type: 'notification',
                message: formattedMessage,
                important,
                button
            }));
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await Notification.findByIdAndUpdate(notification._id, {
            status: 'sent',
            sentAt: new Date(),
            'stats.sentCount': 1
        });

        res.json({
            success: true,
            data: {
                notificationId: notification._id,
                message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
router.post('/schedule', async (req, res) => {
    try {
        const { type, message, important, conditions, button, scheduledFor } = req.body;

        if (!scheduledFor) {
            return res.status(400).json({
                success: false,
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = await Notification.create({
            type,
            message,
            important,
            conditions,
            button,
            scheduledFor: new Date(scheduledFor),
            status: 'scheduled'
        });

        res.status(201).json({
            success: true,
            data: notification
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
router.post('/:id/read', async (req, res) => {
    try {
        const { id } = req.params;
        const { userId } = req.body;

        if (!userId) {
            return res.status(400).json({
                success: false,
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            });
        }

        const notification = await Notification.findById(id);
        if (!notification) {
            return res.status(404).json({
                success: false,
                error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ü–µ–ª–µ–≤—ã—Ö –∏ –Ω–µ –æ—Ç–º–µ—á–∞–ª –ª–∏ –æ–Ω —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        if (!notification.stats.readBy) {
            notification.stats.readBy = [];
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        if (!notification.stats.readBy.includes(userId)) {
            notification.stats.readBy.push(userId);
            notification.stats.readCount = notification.stats.readBy.length;
            await notification.save();
        }

        res.json({
            success: true,
            data: {
                readCount: notification.stats.readCount
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

export default router;