// routes/productRoutes.js
import express from 'express';
import ProductClaim from '../models/ProductClaim.js';
import Product from '../models/Product.js';

const router = express.Router();

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
router.post('/claim', async (req, res) => {
    try {
        const { userId, userData, productId } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!userId || !productId) {
            return res.status(400).json({
                success: false,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId –∏ productId'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({
                success: false,
                error: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
        const existingClaim = await ProductClaim.findOne({
            userId,
            productId
        });

        if (existingClaim) {
            return res.json({
                success: true,
                data: existingClaim,
                message: '–ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        const newClaim = await ProductClaim.create({
            userId,
            userData,
            productId,
            status: 'pending',
            claimData: {},
            note: ''
        });

        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ
        await Product.findByIdAndUpdate(
            productId,
            { $inc: { 'stats.claims': 1 } }
        );

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å Bot API)
        if (req.bot) {
            try {
                const adminId = process.env.ADMIN_TELEGRAM_ID;
                if (adminId) {
                    const message = `üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç!\n\n–ü—Ä–æ–¥—É–∫—Ç: ${product.name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.first_name} ${userData.last_name || ''} (@${userData.username || '–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'})`;

                    await req.bot.sendMessage(adminId, message);
                }
            } catch (notifyError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifyError);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            }
        }

        res.status(201).json({
            success: true,
            data: newClaim
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/claims/user/:userId', async (req, res) => {
    try {
        const { userId } = req.params;

        const claims = await ProductClaim.find({ userId });

        res.json({
            success: true,
            data: claims
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

export default router;